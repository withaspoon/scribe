#! /bin/sh
#
# skeleton	example file to build /etc/init.d/ scripts.
#		This file should be used to construct scripts for /etc/init.d.
#
#		Written by Miquel van Smoorenburg <miquels@cistron.nl>.
#		Modified for Debian
#		by Ian Murdock <imurdock@gnu.ai.mit.edu>.
#               Further changes by Javier Fernandez-Sanguino <jfs@debian.org>
#
# Version:	@(#)skeleton  1.9  26-Feb-2001  miquels@cistron.nl
#

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/bin/scribed
RUN_CTL=/usr/sbin/scribe_ctrl
NAME=scribe
DESC=scribe
USER=scribe

export CLASSPATH=/usr/lib/hadoop-0.20/hadoop-0.20.2+228-core.jar:/usr/share/java/commons-logging.jar

test -x $DAEMON || exit 0

LOGFILE=/var/log/scribe.log
PIDFILE=/var/run/$NAME.pid
DODTIME=1                   # Time to wait for the server to die, in seconds
                            # If this value is set too low you might not
                            # let some servers to die gracefully and
                            # 'restart' will not work

# Include scribe defaults if available
if [ -f /etc/default/scribe ] ; then
    . /etc/default/scribe
fi

if [ ! -f $SCRIBE_CONFIG ]; then
	exit 0
fi
port=$(egrep "^port=" $SCRIBE_CONFIG | awk -F"=" '{ print $2 }')
set -e


running_pid()
{
    # Check if a given process pid's cmdline matches a given name
    pid=$1
    name=$2
    [ -z "$pid" ] && return 1
    [ ! -d /proc/$pid ] &&  return 1
    cmd=`cat /proc/$pid/cmdline | tr "\000" "\n"|head -n 1 |cut -d : -f 1`
    # Is this the expected child?
    [ "$cmd" != "$name" ] &&  return 1
    return 0
}

running()
{
# Check if the process is running looking at /proc
# (works for all users)

    # No pidfile, probably no daemon present
    [ ! -f "$PIDFILE" ] && return 1
    # Obtain the pid and check it against the binary name
    pid=`cat $PIDFILE`
    running_pid $pid $DAEMON || return 1
    return 0
}

force_stop() {
# Forcefully kill the process
    [ ! -f "$PIDFILE" ] && return
    if running ; then
        kill -15 $pid
        # Is it really dead?
        [ -n "$DODTIME" ] && sleep "$DODTIME"s
        if running ; then
            kill -9 $pid
            [ -n "$DODTIME" ] && sleep "$DODTIME"s
            if running ; then
                echo "Cannot kill $LABEL (pid=$pid)!"
                exit 1
            fi
        fi
    fi
    rm -f $PIDFILE
    return 0
}

case "$1" in
  start)
        echo -n "Starting $DESC: "
        start-stop-daemon --background --make-pidfile  --start --quiet --chuid $USER --pidfile $PIDFILE \
            --exec $DAEMON -- $DAEMON_OPTS
	sleep 0.5
        if running ; then
            echo "$NAME."
        else
            echo " ERROR."
        fi
        ;;
  stop)
        echo -n "Stopping $DESC: "
	if running ; then
		$RUN_CTL stop $port
	fi
	rm -f $PIDFILE 
        echo "$NAME."
        ;;
  force-stop)
        echo -n "Forcefully stopping $DESC: "
        force_stop
        if ! running ; then
	    rm -f $PIDFILE 
            echo "$NAME."
        else
            echo " ERROR."
        fi
        ;;
  restart)
    echo -n "Restarting $DESC: "
	if running ; then
		$RUN_CTL stop $port
		[ -n "$DODTIME" ] && sleep $DODTIME
		rm -f $PIDFILE	
		start-stop-daemon --background --make-pidfile  --start --quiet --chuid $USER --pidfile $PIDFILE \
		    --exec $DAEMON -- $DAEMON_OPTS
	else 
		rm -f $PIDFILE
	fi
        echo "$NAME."
        ;;
  status)
    echo -n "$NAME is "
    if running ;  then
	$RUN_CTL status $port
    else
        echo "not running."
        exit 1
    fi
    ;;
  *)
    N=/etc/init.d/$NAME
    echo "Usage: $N {start|stop|restart|status|force-stop}" >&2
    exit 1
    ;;
esac

exit 0
